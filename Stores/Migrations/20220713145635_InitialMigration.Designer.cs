// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stores.App_Data;

namespace Stores.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220713145635_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Stores.Models.BinCard", b =>
                {
                    b.Property<string>("BinCardNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("MaximumStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("ReOrderLevel")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("BinCardNumber");

                    b.HasIndex("ItemCode");

                    b.HasIndex("LocationCode");

                    b.HasIndex("UnitId");

                    b.ToTable("BinCard");
                });

            modelBuilder.Entity("Stores.Models.BinCardTransactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("BinCardNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("GRBNoteNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("QuantityIssued")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<string>("RequistionNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Who")
                        .HasColumnType("longtext");

                    b.HasKey("TransactionId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("BinCardTransaction");
                });

            modelBuilder.Entity("Stores.Models.Department", b =>
                {
                    b.Property<int>("DepartmentCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DepartmentCode");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Stores.Models.GoodsReceivedBook", b =>
                {
                    b.Property<string>("GRBNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BinCardNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ItemCode")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<string>("StoreKeeper")
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("UnitRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("WayBillNumber")
                        .HasColumnType("longtext");

                    b.HasKey("GRBNumber");

                    b.ToTable("GoodsReceivedBook");
                });

            modelBuilder.Entity("Stores.Models.Items", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ItemCode");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Stores.Models.LocalPurchaseOrder", b =>
                {
                    b.Property<string>("LPONumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateSignedByMD")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateSignedByProcurement")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeliveryPeriod")
                        .HasColumnType("longtext");

                    b.Property<string>("ItemCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LPOReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LocationCode")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("longtext");

                    b.Property<string>("ProcurementOfficerCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Purpose")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("longtext");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Who")
                        .HasColumnType("longtext");

                    b.HasKey("LPONumber");

                    b.ToTable("LocalPurchaseOrder");
                });

            modelBuilder.Entity("Stores.Models.Location", b =>
                {
                    b.Property<string>("LocationCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LocationCode");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Stores.Models.MeasuringUnit", b =>
                {
                    b.Property<int?>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("UnitId");

                    b.ToTable("MeasuringUnit");
                });

            modelBuilder.Entity("Stores.Models.RequisitionNote", b =>
                {
                    b.Property<int>("RequisitionNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BinCardNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DepartmentCode")
                        .HasColumnType("int");

                    b.Property<string>("FHODAuthorization")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FHODAuthorizationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssuedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("QuantityApproved")
                        .HasColumnType("int");

                    b.Property<int>("QuantityIssued")
                        .HasColumnType("int");

                    b.Property<int>("QuantityRequested")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RequisitionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequisitionNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("StaffIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("RequisitionNoteId");

                    b.HasIndex("DepartmentCode");

                    b.HasIndex("ItemCode");

                    b.HasIndex("LocationCode");

                    b.HasIndex("UnitId");

                    b.ToTable("RequisitionNote");
                });

            modelBuilder.Entity("Stores.Models.Staff", b =>
                {
                    b.Property<string>("StaffIdentificationNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DepartmentCode")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Middlename")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StaffIdentificationNumber");

                    b.HasIndex("DepartmentCode");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Stores.Models.Suppliers", b =>
                {
                    b.Property<string>("SupplierCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("GPSLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficeNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("TinNumber")
                        .HasColumnType("longtext");

                    b.HasKey("SupplierCode");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Stores.Models.TransactionType", b =>
                {
                    b.Property<int?>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypes")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("Stores.Models.WayBills", b =>
                {
                    b.Property<string>("WayBillNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DispatchDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DispatchedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DriversName")
                        .HasColumnType("longtext");

                    b.Property<string>("ItemCode")
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceivedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("WayBillDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Whom")
                        .HasColumnType("longtext");

                    b.HasKey("WayBillNumber");

                    b.ToTable("WayBills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stores.Models.BinCard", b =>
                {
                    b.HasOne("Stores.Models.Items", "ItemDescription")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Models.Location", "LocationName")
                        .WithMany()
                        .HasForeignKey("LocationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Models.MeasuringUnit", "UnitName")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemDescription");

                    b.Navigation("LocationName");

                    b.Navigation("UnitName");
                });

            modelBuilder.Entity("Stores.Models.BinCardTransactions", b =>
                {
                    b.HasOne("Stores.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Stores.Models.RequisitionNote", b =>
                {
                    b.HasOne("Stores.Models.Department", "DepartmentName")
                        .WithMany()
                        .HasForeignKey("DepartmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Models.Items", "ItemDescription")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Models.Location", "LocationName")
                        .WithMany()
                        .HasForeignKey("LocationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Models.MeasuringUnit", "UnitName")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentName");

                    b.Navigation("ItemDescription");

                    b.Navigation("LocationName");

                    b.Navigation("UnitName");
                });

            modelBuilder.Entity("Stores.Models.Staff", b =>
                {
                    b.HasOne("Stores.Models.Department", "DepartmentName")
                        .WithMany()
                        .HasForeignKey("DepartmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentName");
                });
#pragma warning restore 612, 618
        }
    }
}
